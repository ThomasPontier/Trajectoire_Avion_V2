"""
Script de d√©monstration automatique - Version 1.1
Teste diff√©rents sc√©narios de vol
"""

import numpy as np
from environment import Environment
from aircraft import Aircraft, AircraftType
from trajectory_calculator import TrajectoryCalculator


def print_separator():
    print("\n" + "="*80 + "\n")


def demo_scenario(name, aircraft_type, position, speed, env):
    """D√©montre un sc√©nario de vol"""
    
    print(f"üõ©Ô∏è  SC√âNARIO : {name}")
    print(f"   Type d'avion : {AircraftType.get_specifications(aircraft_type)['name']}")
    print(f"   Position initiale : ({position[0]:.1f}, {position[1]:.1f}, {position[2]:.1f}) km")
    print(f"   Vitesse : {speed} km/h")
    
    # Cr√©er l'avion
    aircraft = Aircraft(position=position, speed=speed, heading=90.0, aircraft_type=aircraft_type)
    
    print(f"   Pente max descente : {aircraft.max_descent_slope:.1f}¬∞")
    
    # Calculer la trajectoire
    calculator = TrajectoryCalculator(env)
    trajectory, params = calculator.calculate_trajectory(aircraft)
    
    # Afficher les r√©sultats
    print(f"\n   üìä R√âSULTATS :")
    print(f"   ‚Ä¢ Distance totale : {params['distance']:.2f} km")
    print(f"   ‚Ä¢ Temps de vol : {params['flight_time']*60:.1f} minutes")
    
    if 'level_flight_distance' in params:
        print(f"   ‚Ä¢ Vol en palier : {params['level_flight_distance']:.2f} km")
        print(f"   ‚Ä¢ Distance de descente : {params['descent_distance']:.2f} km")
        actual_slope = np.min(params['slope'])
        print(f"   ‚Ä¢ Pente de descente utilis√©e : {actual_slope:.2f}¬∞")
        
        # V√©rifier la contrainte
        if actual_slope >= aircraft.max_descent_slope:
            print(f"   ‚úÖ Contrainte respect√©e !")
        else:
            print(f"   ‚ùå ATTENTION : Contrainte viol√©e !")
    
    print(f"   ‚Ä¢ Altitude finale : {trajectory[-1, 2]:.3f} km (cible FAF : {env.faf_position[2]:.3f} km)")
    
    return trajectory, params


def main():
    """Programme principal de d√©monstration"""
    
    print("‚ïî" + "="*78 + "‚ïó")
    print("‚ïë" + " "*15 + "D√âMONSTRATION VERSION 1.1 - CONTRAINTE DE PENTE" + " "*15 + "‚ïë")
    print("‚ïö" + "="*78 + "‚ïù")
    
    # Cr√©er l'environnement
    env = Environment(size_x=50, size_y=50, size_z=5)
    
    print(f"\nüè¢ A√©roport : ({env.airport_position[0]:.1f}, {env.airport_position[1]:.1f}, {env.airport_position[2]:.1f}) km")
    print(f"üéØ Point FAF : ({env.faf_position[0]:.1f}, {env.faf_position[1]:.1f}, {env.faf_position[2]:.1f}) km")
    
    print_separator()
    
    # Sc√©nario 1 : Avion commercial
    demo_scenario(
        "Descente normale - Avion Commercial",
        "commercial",
        np.array([10.0, 10.0, 3.0]),
        250.0,
        env
    )
    
    print_separator()
    
    # Sc√©nario 2 : Avion cargo
    demo_scenario(
        "Descente douce - Avion Cargo",
        "cargo",
        np.array([10.0, 10.0, 3.0]),
        220.0,
        env
    )
    
    print_separator()
    
    # Sc√©nario 3 : Avion l√©ger
    demo_scenario(
        "Descente rapide - Avion L√©ger",
        "light",
        np.array([10.0, 10.0, 3.0]),
        180.0,
        env
    )
    
    print_separator()
    
    # Sc√©nario 4 : Haute altitude
    demo_scenario(
        "Tr√®s haute altitude - Cargo",
        "cargo",
        np.array([0.0, 0.0, 5.0]),
        220.0,
        env
    )
    
    print_separator()
    
    # Sc√©nario 5 : Distance courte
    demo_scenario(
        "Distance courte - Commercial",
        "commercial",
        np.array([35.0, 35.0, 3.0]),
        250.0,
        env
    )
    
    print_separator()
    
    print("\n‚úÖ D√©monstration termin√©e !")
    print("\nüí° Observations cl√©s :")
    print("   1. Plus la pente max est raide, plus le vol en palier est long")
    print("   2. L'avion descend toujours au plus tard possible")
    print("   3. Les contraintes de pente sont respect√©es")
    print("   4. En cas de distance insuffisante, la pente est ajust√©e")
    

if __name__ == "__main__":
    main()
